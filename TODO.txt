Last updated: Oct 27, 2023

Preprocessing
- Pick only the closing prices (DONE)
- Select the common days (there were no uncommon days) (DONE)
- Resolve ticker conflicts - Replace with the newest name of the conflicting tickers.
- NIFTY 50 data: Nov 5, 2010-Apr 30, 2021;
  No NULL values. Let us drop data from 2010 and 2021.
  So, at this point, we have data from 2011 through 2019.
  
  Then use 2011-2019 as our training data and
  2020 as our test data.
  - Use the training data to predict a Bayesian network over 50 stocks/vertices.
  - The predicted network should be saved as an adjacency matrix.
  - Find a python time series simulator that takes an adjacency matrix as input and 
  produces a time series as output.
  - Using the simulator, generate a time series of k days where k = Number of days in the 2020 data.
  - Save the simulated/predicted data of 2020 in the form of a matrix.
  - Then for each company, find the distance between the predicted stock prices and true stock prices
    using the following strategy:
	For each company
		dist = 0;
	   For each day in 2020
	      curr_dist = abs(true closing price on that day - predicted closing price on that day);
		  dist+= curr_dist;
	   End
	   avg_dist = (dist / the total no. of days in 2020);
	   // The 'avg_dist' tells us the average daily misprediction of the stock price of the said company
	   // by our predicted Bayesian network.
	   // In the BTP report, create a table with two columns -- company name and average daily misprediction.
	End
    - Optional: Predict one Bayesian network for each quarter. 
   

Methods
- https://erdogant.github.io/bnlearn/pages/html/Structure%20learning.html
 -- Use a virtual env such as anaconda
 -- SP: Install bnlearn and import bnlearn
    Oct 13: SP is able to install and import bnlearn successfully on the dept. server using the following commands:
    conda create -n bnl python=3.10
    conda activate env_bnlearn
    pip install bnlearn	
	python
	------------
	import bnlearn as bn ## Getting the following warning, simply ignoring it
	UserWarning: CUDA initialization: The NVIDIA driver on your system is too old (found version 11020). Please update your GPU driver by downloading and installing a new version from the URL: http://www.nvidia.com/Download/index.aspx Alternatively, go to: https://pytorch.org to install a PyTorch version that has been compiled with your version of the CUDA driver. (Triggered internally at ../c10/cuda/CUDAFunctions.cpp:108.)
	-------------
	df = bn.import_example()
	model = bn.structure_learning.fit(df)
	-------------
- The Toyota paper 
 -- Figure out who are the nodes in their predicted Bayes net (PUT ON HOLD)
 -- Check for the dataset and the code (PUT ON HOLD)

=====================================================
BTP report and slides workflow
- Introduction/Motivation
- Methods
	-- Discretization strategy
	-- Theorem and the proof that the predicted values belong to [0, 1]
- Results
- Summary and Future Work
	-- In this project, we did not compare the prediction goodness with that of alternative algorithms. Hence, such a comparative study can be performed in the future.

Code
- Share the code on github
 